<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.binance.master.old.data.charge.OldUserChargeAddressMapper">
	<resultMap id="BaseResultMap" type="com.binance.master.old.models.charge.OldUserChargeAddress">
		<id column="id" jdbcType="INTEGER" property="id" />
		<id column="coin" jdbcType="VARCHAR" property="coin" />
		<result column="user_id" jdbcType="VARCHAR" property="userId" />
		<result column="address" jdbcType="VARCHAR" property="address" />
		<result column="address_tag" jdbcType="VARCHAR" property="addressTag" />
		<result column="check_sum" jdbcType="VARCHAR" property="checkSum" />
		<result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
		<result column="status" jdbcType="INTEGER" property="status" />
		<result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
	</resultMap>
	<sql id="Base_Column_List">
		id, coin, user_id, address, address_tag, check_sum, create_time, status, update_time
	</sql>
	<select id="selectByPrimaryKey" parameterType="com.binance.master.old.models.charge.OldUserChargeAddressKey" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from user_charge_address
		where id = #{id,jdbcType=INTEGER}
		and coin = #{coin,jdbcType=VARCHAR}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="com.binance.master.old.models.charge.OldUserChargeAddressKey">
		delete from user_charge_address
		where id = #{id,jdbcType=INTEGER}
		and coin = #{coin,jdbcType=VARCHAR}
	</delete>
	<insert id="insert" parameterType="com.binance.master.old.models.charge.OldUserChargeAddress">
		insert into user_charge_address (id, coin, user_id,
		address, address_tag, check_sum,
		create_time, status, update_time
		)
		values (#{id,jdbcType=INTEGER}, #{coin,jdbcType=VARCHAR}, #{userId,jdbcType=VARCHAR},
		#{address,jdbcType=VARCHAR}, #{addressTag,jdbcType=VARCHAR}, #{checkSum,jdbcType=VARCHAR},
		#{createTime,jdbcType=TIMESTAMP}, #{status,jdbcType=INTEGER}, #{updateTime,jdbcType=TIMESTAMP}
		)
	</insert>
	<insert id="insertSelective" parameterType="com.binance.master.old.models.charge.OldUserChargeAddress">
		insert into user_charge_address
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="coin != null">
				coin,
			</if>
			<if test="userId != null">
				user_id,
			</if>
			<if test="address != null">
				address,
			</if>
			<if test="addressTag != null">
				address_tag,
			</if>
			<if test="checkSum != null">
				check_sum,
			</if>
			<if test="createTime != null">
				create_time,
			</if>
			<if test="status != null">
				status,
			</if>
			<if test="updateTime != null">
				update_time,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=INTEGER},
			</if>
			<if test="coin != null">
				#{coin,jdbcType=VARCHAR},
			</if>
			<if test="userId != null">
				#{userId,jdbcType=VARCHAR},
			</if>
			<if test="address != null">
				#{address,jdbcType=VARCHAR},
			</if>
			<if test="addressTag != null">
				#{addressTag,jdbcType=VARCHAR},
			</if>
			<if test="checkSum != null">
				#{checkSum,jdbcType=VARCHAR},
			</if>
			<if test="createTime != null">
				#{createTime,jdbcType=TIMESTAMP},
			</if>
			<if test="status != null">
				#{status,jdbcType=INTEGER},
			</if>
			<if test="updateTime != null">
				#{updateTime,jdbcType=TIMESTAMP},
			</if>
		</trim>
	</insert>
	<update id="updateByPrimaryKeySelective" parameterType="com.binance.master.old.models.charge.OldUserChargeAddress">
		update user_charge_address
		<set>
			<if test="userId != null">
				user_id = #{userId,jdbcType=VARCHAR},
			</if>
			<if test="address != null">
				address = #{address,jdbcType=VARCHAR},
			</if>
			<if test="addressTag != null">
				address_tag = #{addressTag,jdbcType=VARCHAR},
			</if>
			<if test="checkSum != null">
				check_sum = #{checkSum,jdbcType=VARCHAR},
			</if>
			<if test="createTime != null">
				create_time = #{createTime,jdbcType=TIMESTAMP},
			</if>
			<if test="status != null">
				status = #{status,jdbcType=INTEGER},
			</if>
			<if test="updateTime != null">
				update_time = #{updateTime,jdbcType=TIMESTAMP},
			</if>
		</set>
		where id = #{id,jdbcType=INTEGER}
		and coin = #{coin,jdbcType=VARCHAR}
	</update>
	<update id="updateByPrimaryKey" parameterType="com.binance.master.old.models.charge.OldUserChargeAddress">
		update user_charge_address
		set user_id = #{userId,jdbcType=VARCHAR},
		address = #{address,jdbcType=VARCHAR},
		address_tag = #{addressTag,jdbcType=VARCHAR},
		check_sum = #{checkSum,jdbcType=VARCHAR},
		create_time = #{createTime,jdbcType=TIMESTAMP},
		status = #{status,jdbcType=INTEGER},
		update_time = #{updateTime,jdbcType=TIMESTAMP}
		where id = #{id,jdbcType=INTEGER}
		and coin = #{coin,jdbcType=VARCHAR}
	</update>
	<select id="getLastAddress" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from user_charge_address uca 
        where uca.user_id = #{userId} and uca.coin = #{coin} order by uca.id desc limit 1
    </select>
    
    <select id="getAddressSum" resultType="java.lang.Long">
        select count(*) from user_charge_address 
        where user_id=#{userId} and coin=#{coin} and create_time>=date_sub(now(),interval 1 day)
    </select>
</mapper>