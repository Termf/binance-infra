<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper
	namespace="com.binance.master.old.data.account.OldCompanyAuthenticationMapper">
	<resultMap id="BaseResultMap"
		type="com.binance.master.old.models.account.OldCompanyAuthentication">
		<id column="id" jdbcType="BIGINT" property="id" />
		<result column="user_id" jdbcType="VARCHAR" property="userId" />
		<result column="company_name" jdbcType="VARCHAR" property="companyName" />
		<result column="company_address" jdbcType="VARCHAR" property="companyAddress" />
		<result column="company_country" jdbcType="VARCHAR" property="companyCountry"/>
		<result column="applyer_name" jdbcType="VARCHAR" property="applyerName" />
		<result column="applyer_email" jdbcType="VARCHAR" property="applyerEmail" />
		<result column="status" jdbcType="INTEGER" property="status" />
		<result column="info" jdbcType="VARCHAR" property="info" />
		<result column="insert_time" jdbcType="TIMESTAMP" property="insertTime" />
		<result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
	</resultMap>
	<sql id="Base_Column_List">
		id, user_id, company_name, company_address, company_country,applyer_name, applyer_email,
		status,
		info, insert_time, update_time
	</sql>
	<select id="selectByPrimaryKey" parameterType="java.lang.Long"
		resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from company_authentication
		where id = #{id,jdbcType=BIGINT}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
		delete from company_authentication
		where id = #{id,jdbcType=BIGINT}
	</delete>
	<insert id="insert"
		parameterType="com.binance.master.old.models.account.OldCompanyAuthentication">
		insert into company_authentication (id, user_id, company_name,
		company_address,company_country, applyer_name, applyer_email,
		status, info, insert_time,
		update_time)
		values (#{id,jdbcType=BIGINT}, #{userId,jdbcType=VARCHAR},
		#{companyName,jdbcType=VARCHAR},
		#{companyAddress,jdbcType=VARCHAR},#{companyCountry,jdbcType=VARCHAR}, #{applyerName,jdbcType=VARCHAR}, #{applyerEmail,jdbcType=VARCHAR},
		#{status,jdbcType=INTEGER}, #{info,jdbcType=VARCHAR},
		#{insertTime,jdbcType=TIMESTAMP},
		#{updateTime,jdbcType=TIMESTAMP})
	</insert>
	<insert id="insertSelective"
		parameterType="com.binance.master.old.models.account.OldCompanyAuthentication">
		insert into company_authentication
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="userId != null">
				user_id,
			</if>
			<if test="companyName != null">
				company_name,
			</if>
			<if test="companyAddress != null">
				company_address,
			</if>
			<if test="companyCountry != null">
				company_country,
			</if>
			<if test="applyerName != null">
				applyer_name,
			</if>
			<if test="applyerEmail != null">
				applyer_email,
			</if>
			<if test="status != null">
				status,
			</if>
			<if test="info != null">
				info,
			</if>
			<if test="insertTime != null">
				insert_time,
			</if>
			<if test="updateTime != null">
				update_time,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=BIGINT},
			</if>
			<if test="userId != null">
				#{userId,jdbcType=VARCHAR},
			</if>
			<if test="companyName != null">
				#{companyName,jdbcType=VARCHAR},
			</if>
			<if test="companyAddress != null">
				#{companyAddress,jdbcType=VARCHAR},
			</if>
			<if test="companyCountry != null">
				#{companyCountry,jdbcType=VARCHAR},
			</if>
			<if test="applyerName != null">
				#{applyerName,jdbcType=VARCHAR},
			</if>
			<if test="applyerEmail != null">
				#{applyerEmail,jdbcType=VARCHAR},
			</if>
			<if test="status != null">
				#{status,jdbcType=INTEGER},
			</if>
			<if test="info != null">
				#{info,jdbcType=VARCHAR},
			</if>
			<if test="insertTime != null">
				#{insertTime,jdbcType=TIMESTAMP},
			</if>
			<if test="updateTime != null">
				#{updateTime,jdbcType=TIMESTAMP},
			</if>
		</trim>
	</insert>
	<update id="updateByPrimaryKeySelective"
		parameterType="com.binance.master.old.models.account.OldCompanyAuthentication">
		update company_authentication
		<set>
			<if test="userId != null">
				user_id = #{userId,jdbcType=VARCHAR},
			</if>
			<if test="companyName != null">
				company_name = #{companyName,jdbcType=VARCHAR},
			</if>
			<if test="companyAddress != null">
				company_address = #{companyAddress,jdbcType=VARCHAR},
			</if>
			<if test="companyCountry != null">
				company_country = #{companyAddress,jdbcType=VARCHAR},
			</if>
			<if test="applyerName != null">
				applyer_name = #{applyerName,jdbcType=VARCHAR},
			</if>
			<if test="applyerEmail != null">
				applyer_email = #{applyerEmail,jdbcType=VARCHAR},
			</if>
			<if test="status != null">
				status = #{status,jdbcType=INTEGER},
			</if>
			<if test="info != null">
				info = #{info,jdbcType=VARCHAR},
			</if>
			<if test="insertTime != null">
				insert_time = #{insertTime,jdbcType=TIMESTAMP},
			</if>
			<if test="updateTime != null">
				update_time = #{updateTime,jdbcType=TIMESTAMP},
			</if>
		</set>
		where id = #{id,jdbcType=BIGINT}
	</update>
	<update id="updateByPrimaryKey"
		parameterType="com.binance.master.old.models.account.OldCompanyAuthentication">
		update company_authentication
		set user_id = #{userId,jdbcType=VARCHAR},
		company_name = #{companyName,jdbcType=VARCHAR},
		company_address = #{companyAddress,jdbcType=VARCHAR},
		company_country = #{companyCountry,jdbcType=VARCHAR},
		applyer_name = #{applyerName,jdbcType=VARCHAR},
		applyer_email = #{applyerEmail,jdbcType=VARCHAR},
		status = #{status,jdbcType=INTEGER},
		info = #{info,jdbcType=VARCHAR},
		insert_time = #{insertTime,jdbcType=TIMESTAMP},
		update_time = #{updateTime,jdbcType=TIMESTAMP}
		where id = #{id,jdbcType=BIGINT}
	</update>
	<select id="selectByUserIds" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from company_authentication
		where user_id in 
		<foreach collection="userIds" open="(" close=")" separator="," item="item">
			#{item,jdbcType=VARCHAR}
		</foreach>
		order by id asc
	</select>
	
	<select id="selectByUserId" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from company_authentication
		where user_id = #{userId,jdbcType=VARCHAR}
		order by id asc
	</select>
</mapper>