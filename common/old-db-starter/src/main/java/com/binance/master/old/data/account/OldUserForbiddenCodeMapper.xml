<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.binance.master.old.data.account.OldUserForbiddenCodeMapper">
	<resultMap id="BaseResultMap"
		type="com.binance.master.old.models.account.OldUserForbiddenCode">
		<id column="id" jdbcType="INTEGER" property="id" />
		<result column="user_id" jdbcType="VARCHAR" property="userId" />
		<result column="email_verify_code" jdbcType="VARCHAR" property="emailVerifyCode" />
		<result column="status" jdbcType="INTEGER" property="status" />
		<result column="expire_time" jdbcType="TIMESTAMP" property="expireTime" />
		<result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
		<result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
	</resultMap>
	<sql id="Base_Column_List">
		id, user_id, email_verify_code, status, expire_time, create_time,
		update_time
	</sql>
	<select id="selectByPrimaryKey" parameterType="java.lang.Integer"
		resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from user_forbidden_code
		where id = #{id,jdbcType=INTEGER}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from user_forbidden_code
		where id = #{id,jdbcType=INTEGER}
	</delete>
	<insert id="insert"
		parameterType="com.binance.master.old.models.account.OldUserForbiddenCode">
		insert into user_forbidden_code (id, user_id, email_verify_code,
		status, expire_time, create_time,
		update_time)
		values (#{id,jdbcType=INTEGER}, #{userId,jdbcType=VARCHAR},
		#{emailVerifyCode,jdbcType=VARCHAR},
		#{status,jdbcType=INTEGER}, #{expireTime,jdbcType=TIMESTAMP}, #{createTime,jdbcType=TIMESTAMP},
		#{updateTime,jdbcType=TIMESTAMP})
	</insert>
	<insert id="insertSelective"
		parameterType="com.binance.master.old.models.account.OldUserForbiddenCode">
		insert into user_forbidden_code
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="userId != null">
				user_id,
			</if>
			<if test="emailVerifyCode != null">
				email_verify_code,
			</if>
			<if test="status != null">
				status,
			</if>
			<if test="expireTime != null">
				expire_time,
			</if>
			<if test="createTime != null">
				create_time,
			</if>
			<if test="updateTime != null">
				update_time,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=INTEGER},
			</if>
			<if test="userId != null">
				#{userId,jdbcType=VARCHAR},
			</if>
			<if test="emailVerifyCode != null">
				#{emailVerifyCode,jdbcType=VARCHAR},
			</if>
			<if test="status != null">
				#{status,jdbcType=INTEGER},
			</if>
			<if test="expireTime != null">
				#{expireTime,jdbcType=TIMESTAMP},
			</if>
			<if test="createTime != null">
				#{createTime,jdbcType=TIMESTAMP},
			</if>
			<if test="updateTime != null">
				#{updateTime,jdbcType=TIMESTAMP},
			</if>
		</trim>
	</insert>
	<update id="updateByPrimaryKeySelective"
		parameterType="com.binance.master.old.models.account.OldUserForbiddenCode">
		update user_forbidden_code
		<set>
			<if test="userId != null">
				user_id = #{userId,jdbcType=VARCHAR},
			</if>
			<if test="emailVerifyCode != null">
				email_verify_code = #{emailVerifyCode,jdbcType=VARCHAR},
			</if>
			<if test="status != null">
				status = #{status,jdbcType=INTEGER},
			</if>
			<if test="expireTime != null">
				expire_time = #{expireTime,jdbcType=TIMESTAMP},
			</if>
			<if test="createTime != null">
				create_time = #{createTime,jdbcType=TIMESTAMP},
			</if>
			<if test="updateTime != null">
				update_time = #{updateTime,jdbcType=TIMESTAMP},
			</if>
		</set>
		where id = #{id,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey"
		parameterType="com.binance.master.old.models.account.OldUserForbiddenCode">
		update user_forbidden_code
		set user_id = #{userId,jdbcType=VARCHAR},
		email_verify_code = #{emailVerifyCode,jdbcType=VARCHAR},
		status = #{status,jdbcType=INTEGER},
		expire_time = #{expireTime,jdbcType=TIMESTAMP},
		create_time = #{createTime,jdbcType=TIMESTAMP},
		update_time = #{updateTime,jdbcType=TIMESTAMP}
		where id = #{id,jdbcType=INTEGER}
	</update>
	<select id="selectByUserIds" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from user_forbidden_code
		where user_id IN 
		<foreach collection="userIds" open="(" close=")" separator="," item="item">
			#{item,jdbcType=VARCHAR}
		</foreach>
	</select>
</mapper>