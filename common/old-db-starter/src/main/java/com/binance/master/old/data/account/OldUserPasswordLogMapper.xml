<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.binance.master.old.data.account.OldUserPasswordLogMapper">
	<resultMap id="BaseResultMap"
		type="com.binance.master.old.models.account.OldUserPasswordLog">
		<id column="id" jdbcType="INTEGER" property="id" />
		<result column="ip" jdbcType="VARCHAR" property="ip" />
		<result column="userId" jdbcType="VARCHAR" property="userid" />
		<result column="time" jdbcType="TIMESTAMP" property="time" />
		<result column="result" jdbcType="INTEGER" property="result" />
		<result column="type" jdbcType="INTEGER" property="type" />
	</resultMap>
	<sql id="Base_Column_List">
		id, ip, userId, time, result, type
	</sql>
	<select id="selectByPrimaryKey" parameterType="java.lang.Integer"
		resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from user_password_log
		where id = #{id,jdbcType=INTEGER}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from user_password_log
		where id = #{id,jdbcType=INTEGER}
	</delete>
	<insert id="insert"
		parameterType="com.binance.master.old.models.account.OldUserPasswordLog">
		insert into user_password_log (id, ip, userId,
		time, result, type
		)
		values (#{id,jdbcType=INTEGER}, #{ip,jdbcType=VARCHAR},
		#{userid,jdbcType=VARCHAR},
		#{time,jdbcType=TIMESTAMP}, #{result,jdbcType=INTEGER}, #{type,jdbcType=INTEGER}
		)
	</insert>
	<insert id="insertSelective"
		parameterType="com.binance.master.old.models.account.OldUserPasswordLog">
		insert into user_password_log
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="ip != null">
				ip,
			</if>
			<if test="userid != null">
				userId,
			</if>
			<if test="time != null">
				time,
			</if>
			<if test="result != null">
				result,
			</if>
			<if test="type != null">
				type,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=INTEGER},
			</if>
			<if test="ip != null">
				#{ip,jdbcType=VARCHAR},
			</if>
			<if test="userid != null">
				#{userid,jdbcType=VARCHAR},
			</if>
			<if test="time != null">
				#{time,jdbcType=TIMESTAMP},
			</if>
			<if test="result != null">
				#{result,jdbcType=INTEGER},
			</if>
			<if test="type != null">
				#{type,jdbcType=INTEGER},
			</if>
		</trim>
	</insert>
	<update id="updateByPrimaryKeySelective"
		parameterType="com.binance.master.old.models.account.OldUserPasswordLog">
		update user_password_log
		<set>
			<if test="ip != null">
				ip = #{ip,jdbcType=VARCHAR},
			</if>
			<if test="userid != null">
				userId = #{userid,jdbcType=VARCHAR},
			</if>
			<if test="time != null">
				time = #{time,jdbcType=TIMESTAMP},
			</if>
			<if test="result != null">
				result = #{result,jdbcType=INTEGER},
			</if>
			<if test="type != null">
				type = #{type,jdbcType=INTEGER},
			</if>
		</set>
		where id = #{id,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey"
		parameterType="com.binance.master.old.models.account.OldUserPasswordLog">
		update user_password_log
		set ip = #{ip,jdbcType=VARCHAR},
		userId = #{userid,jdbcType=VARCHAR},
		time = #{time,jdbcType=TIMESTAMP},
		result = #{result,jdbcType=INTEGER},
		type = #{type,jdbcType=INTEGER}
		where id = #{id,jdbcType=INTEGER}
	</update>
	<select id="selectByUserIds" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from user_password_log
		where userId IN
		<foreach collection="userIds" open="(" close=")" separator="," item="item">
			#{item,jdbcType=VARCHAR}
		</foreach>
	</select>
</mapper>